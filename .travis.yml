language: cpp

dist: bionic

arch:
  - amd64
  - ppc64le
  - s390x

cache:
  directories:
    - $HOME/.dep_cache

env:
  global:
    - fastfloat_DEPENDENCY_CACHE_DIR=$HOME/.dep_cache

matrix:
  include:
    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-8
      env:
        - COMPILER="CC=gcc-8 && CXX=g++-8"
      compiler: gcc-8

    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-9
      env:
        - COMPILER="CC=gcc-9 && CXX=g++-9"
      compiler: gcc-9

    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-10
      env:
        - COMPILER="CC=gcc-10 && CXX=g++-10"
      compiler: gcc-10

    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-10
      env:
        - COMPILER="CC=gcc-10 && CXX=g++-10"
        - SANITIZE="on"
      compiler: gcc-10-sanitize

    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-10
      env:
        - COMPILER="CC=gcc-10 && CXX=g++-10"
        - STATIC="on"
      compiler: gcc-10-static

    - os: linux
      addons:
        apt:
          sources:
            - llvm-toolchain-bionic-6.0
          packages:
            - clang-6.0
      env:
        - COMPILER="CC=clang-6.0 && CXX=clang++-6.0"
      compiler: clang-6

    - os: linux
      addons:
        apt:
          sources:
            - llvm-toolchain-bionic-7
          packages:
            - clang-7
      env:
        - COMPILER="CC=clang-7 && CXX=clang++-7"
      compiler: clang-7

    - os: linux
      addons:
        apt:
          sources:
            - llvm-toolchain-bionic-8
          packages:
            - clang-8
      env:
        - COMPILER="CC=clang-8 && CXX=clang++-8"
      compiler: clang-8

    - os: linux
      addons:
        apt:
          sources:
            - llvm-toolchain-bionic-9
          packages:
            - clang-9
      env:
        - COMPILER="CC=clang-9 && CXX=clang++-9"
      compiler: clang-9

    - os: linux
      addons:
        apt:
          packages:
            - clang-10
          sources:
            - ubuntu-toolchain-r-test
            - sourceline: 'deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-10 main'
              key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'
      env:
        - COMPILER="CC=clang-10 && CXX=clang++-10"
      compiler: clang-10

    - os: linux
      addons:
        apt:
          packages:
            - clang-10
          sources:
            - ubuntu-toolchain-r-test
            - sourceline: 'deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-10 main'
              key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'
      env:
        - COMPILER="CC=clang-10 && CXX=clang++-10"
        - STATIC="on"
      compiler: clang-10-static

    - os: linux
      addons:
        apt:
          packages:
            - clang-10
          sources:
            - ubuntu-toolchain-r-test
            - sourceline: 'deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-10 main'
              key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'
      env:
        - COMPILER="CC=clang-10 && CXX=clang++-10"
        - SANITIZE="on"
      compiler: clang-10-sanitize

before_install:
  - eval "${COMPILER}"

install:
  # make sure we have a recent cmake version.
  # fastfloat itself does not require it, but the tests require >= 3.14.

  # these architectures have a snap:
  # https://gitlab.kitware.com/cmake/cmake/-/issues/20122
  - sudo -E apt-get -y update
  - sudo -E apt-get -y install snapd
  - sudo -E snap install cmake --beta --classic
  - export PATH=/snap/cmake/current/bin:$PATH

  # ALTERNATIVE: does not work on s390 and ppc64le
  ## https://github.com/kahypar/kahypar/blob/master/.travis.yml
  #- echo ${TRAVIS_OS_NAME}
  #- |
  #  if [ "${TRAVIS_OS_NAME}" == "linux" ]; then
  #    pwd ;
  #    export DEPS_DIR="${HOME}/deps" ;
  #    mkdir -p ${DEPS_DIR} && cd ${DEPS_DIR} ;
  #    export CMAKE_URL="https://github.com/Kitware/CMake/releases/download/v3.17.0/cmake-3.17.0-Linux-x86_64.tar.gz";
  #    mkdir cmake;
  #    travis_retry wget --no-check-certificate -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C cmake;
  #    export PATH=${DEPS_DIR}/cmake/bin:${PATH};
  #    cd - ;
  #    pwd
  #  else
  #    brew install cmake || brew upgrade cmake;
  #  fi

  - echo ${PATH}
  - which cmake
  - cmake --version

script:
  - mkdir build
  - cd build
  - cmake  -DFASTFLOAT_TEST=ON  ..
  - make
  - ctest --output-on-failure -R basictest

